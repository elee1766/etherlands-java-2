package etherlandscore.etherlandscore.services;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Int128;
import org.web3j.abi.datatypes.generated.Uint128;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class District extends Contract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b50612d08806100206000396000f3fe6080604052600436106102045760003560e01c806370a0823111610118578063b1e5ec99116100a0578063d7b5b5671161006f578063d7b5b5671461063e578063e985e9c51461065e578063f2fde38b146106a7578063f6552d2f146106c7578063fd58c368146106e757600080fd5b8063b1e5ec99146105ae578063b729daa5146105de578063b88d4fde146105fe578063c87b56dd1461061e57600080fd5b806395d89b41116100e757806395d89b41146104fc578063a22cb46514610511578063a65e6c0d14610531578063a96c448514610551578063af38d7571461059457600080fd5b806370a0823114610489578063715018a6146104a95780638c32f1f1146104be5780638da5cb5b146104de57600080fd5b80632d276f7a1161019b5780634cd88b761161016a5780634cd88b76146103d657806352158f35146103f65780635677afbc1461040c5780636352211e1461044957806369ae14561461046957600080fd5b80632d276f7a14610331578063316859aa1461035e578063378c93ad1461039657806342842e0e146103b657600080fd5b806318160ddd116101d757806318160ddd146102ba5780631b81c552146102de5780631bb8dc98146102fe57806323b872dd1461031157600080fd5b806301ffc9a71461020957806306fdde031461023e578063081812fc14610260578063095ea7b314610298575b600080fd5b34801561021557600080fd5b506102296102243660046127cc565b6106fd565b60405190151581526020015b60405180910390f35b34801561024a57600080fd5b5061025361074f565b60405161023591906129c6565b34801561026c57600080fd5b5061028061027b3660046128c5565b6107e1565b6040516001600160a01b039091168152602001610235565b3480156102a457600080fd5b506102b86102b33660046126b7565b61087b565b005b3480156102c657600080fd5b506102d060cd5481565b604051908152602001610235565b3480156102ea57600080fd5b506102d06102f93660046128c5565b610991565b6102b861030c3660046126e0565b6109b2565b34801561031d57600080fd5b506102b861032c3660046125da565b610cc7565b34801561033d57600080fd5b506102d061034c3660046128c5565b60d16020526000908152604090205481565b34801561036a57600080fd5b506102d061037936600461281e565b60d260209081526000928352604080842090915290825290205481565b3480156103a257600080fd5b506102b86103b13660046127b2565b610cf8565b3480156103c257600080fd5b506102b86103d13660046125da565b610d35565b3480156103e257600080fd5b506102b86103f1366004612847565b610d50565b34801561040257600080fd5b506102d060cc5481565b34801561041857600080fd5b5060ce546104319061010090046001600160801b031681565b6040516001600160801b039091168152602001610235565b34801561045557600080fd5b506102806104643660046128c5565b610def565b34801561047557600080fd5b506102b86104843660046128dd565b610e66565b34801561049557600080fd5b506102d06104a436600461258e565b610f2d565b3480156104b557600080fd5b506102b8610fb4565b3480156104ca57600080fd5b506102b86104d93660046128c5565b611028565b3480156104ea57600080fd5b506097546001600160a01b0316610280565b34801561050857600080fd5b50610253611057565b34801561051d57600080fd5b506102b861052c36600461268e565b611066565b34801561053d57600080fd5b506102d061054c3660046128c5565b61112b565b34801561055d57600080fd5b5061058161056c3660046128c5565b60d060205260009081526040902054600f0b81565b604051600f9190910b8152602001610235565b3480156105a057600080fd5b5060ce546102299060ff1681565b3480156105ba57600080fd5b506105816105c93660046128c5565b60cf60205260009081526040902054600f0b81565b3480156105ea57600080fd5b506102b86105f93660046126e0565b61113b565b34801561060a57600080fd5b506102b8610619366004612615565b611203565b34801561062a57600080fd5b506102536106393660046128c5565b61123b565b34801561064a57600080fd5b506102b861065936600461289e565b611348565b34801561066a57600080fd5b506102296106793660046125a8565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b3480156106b357600080fd5b506102b86106c236600461258e565b611406565b3480156106d357600080fd5b506102b86106e2366004612751565b6114f1565b3480156106f357600080fd5b506102d060cb5481565b60006001600160e01b031982166380ac58cd60e01b148061072e57506001600160e01b03198216635b5e139f60e01b145b8061074957506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606065805461075e90612be2565b80601f016020809104026020016040519081016040528092919081815260200182805461078a90612be2565b80156107d75780601f106107ac576101008083540402835291602001916107d7565b820191906000526020600020905b8154815290600101906020018083116107ba57829003601f168201915b5050505050905090565b6000818152606760205260408120546001600160a01b031661085f5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152606960205260409020546001600160a01b031690565b600061088682610def565b9050806001600160a01b0316836001600160a01b031614156108f45760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610856565b336001600160a01b038216148061091057506109108133610679565b6109825760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610856565b61098c8383611593565b505050565b60ca81815481106109a157600080fd5b600091825260209091200154905081565b60ce5460ff16610a045760405162461bcd60e51b815260206004820152601e60248201527f636c61696d696e672069732063757272656e746c792064697361626c656400006044820152606401610856565b8080610a305760cd54610a18906001612b73565b60cd55610a273360cd54611601565b5060cd54610ab8565b6000610a3b83610def565b6001600160a01b03161415610ab85760405162461bcd60e51b815260206004820152603b60248201527f44697374726963743a20417474656d7074696e6720746f20636c61696d206c6160448201527f6e647320746f206e6f6e6578697374656e7420646973747269637400000000006064820152608401610856565b848314610ad75760405162461bcd60e51b815260040161085690612a2b565b6000805b86811015610b7357610b55888883818110610b0657634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610b1b9190612804565b878784818110610b3b57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610b509190612804565b61161f565b610b5f9083612b73565b915080610b6b81612c1d565b915050610adb565b5085610b895760cb54610b869082612b73565b90505b80341015610be55760405162461bcd60e51b8152602060048201526024808201527f6e6f7420656e6f756768206574682073656e7420746f207075726368617365206044820152631b185b9960e21b6064820152608401610856565b80341115610c2c576000610bf98234612b9f565b604051909150339082156108fc029083906000818181858888f19350505050158015610c29573d6000803e3d6000fd5b50505b60005b86811015610cbd57610caa83898984818110610c5b57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610c709190612804565b888885818110610c9057634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610ca59190612804565b611751565b5080610cb581612c1d565b915050610c2f565b5050505050505050565b610cd13382611948565b610ced5760405162461bcd60e51b815260040161085690612af1565b61098c838383611a3f565b6097546001600160a01b03163314610d225760405162461bcd60e51b815260040161085690612abc565b60ce805460ff1916911515919091179055565b61098c83838360405180602001604052806000815250611203565b600054610100900460ff1680610d69575060005460ff16155b610d855760405162461bcd60e51b815260040161085690612a6e565b600054610100900460ff16158015610da7576000805461ffff19166101011790555b610db18383611bdf565b610db9611c66565b60ce805470ffffffffffffffffffffffffffffffffff1916631e848000179055801561098c576000805461ff0019169055505050565b6000818152606760205260408120546001600160a01b0316806107495760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610856565b610e703385611948565b610ed85760405162461bcd60e51b815260206004820152603360248201527f44697374726963743a207472616e736665722063616c6c6572206973206e6f74604482015272081bdddb995c881b9bdc88185c1c1c9bdd9959606a1b6064820152608401610856565b60005b81811015610f2657610f148585858585818110610f0857634e487b7160e01b600052603260045260246000fd5b90506020020135611ce2565b80610f1e81612c1d565b915050610edb565b5050505050565b60006001600160a01b038216610f985760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610856565b506001600160a01b031660009081526068602052604090205490565b6097546001600160a01b03163314610fde5760405162461bcd60e51b815260040161085690612abc565b6097546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3609780546001600160a01b0319169055565b6097546001600160a01b031633146110525760405162461bcd60e51b815260040161085690612abc565b60cb55565b60606066805461075e90612be2565b6001600160a01b0382163314156110bf5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610856565b336000818152606a602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b60c981815481106109a157600080fd5b6097546001600160a01b031633146111655760405162461bcd60e51b815260040161085690612abc565b8382146111845760405162461bcd60e51b815260040161085690612a2b565b60005b848110156111fb576111e8828787848181106111b357634e487b7160e01b600052603260045260246000fd5b90506020020160208101906111c89190612804565b868685818110610c9057634e487b7160e01b600052603260045260246000fd5b50806111f381612c1d565b915050611187565b505050505050565b61120d3383611948565b6112295760405162461bcd60e51b815260040161085690612af1565b61123584848484611dbd565b50505050565b6000818152606760205260409020546060906001600160a01b03166112ba5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610856565b60006112f660408051808201909152601e81527f68747470733a2f2f65746865726c616e64732e696f2f657374617465732f0000602082015290565b905060008151116113165760405180602001604052806000815250611341565b8061132084611df0565b60405160200161133192919061295a565b6040516020818303038152906040525b9392505050565b6097546001600160a01b031633146113725760405162461bcd60e51b815260040161085690612abc565b6000816001600160801b0316116113d55760405162461bcd60e51b815260206004820152602160248201527f44697374726963743a20576f726c64206c696d6974206d757374206265203e206044820152600360fc1b6064820152608401610856565b60ce80546001600160801b039092166101000270ffffffffffffffffffffffffffffffff0019909216919091179055565b6097546001600160a01b031633146114305760405162461bcd60e51b815260040161085690612abc565b6001600160a01b0381166114955760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610856565b6097546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3609780546001600160a01b0319166001600160a01b0392909216919091179055565b6097546001600160a01b0316331461151b5760405162461bcd60e51b815260040161085690612abc565b805182511461156c5760405162461bcd60e51b815260206004820152601e60248201527f44697374726963743a204c656e67746820646f65736e2774206d6174636800006044820152606401610856565b815161157f9060c9906020850190612339565b50805161098c9060ca906020840190612339565b600081815260696020526040902080546001600160a01b0319166001600160a01b03841690811790915581906115c882610def565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61161b828260405180602001604052806000815250611f0a565b5050565b600080600084600f0b121561163c5761163784612c4c565b61163e565b835b905060008084600f0b121561165b5761165684612c4c565b61165d565b835b90506000816001600160801b0316836001600160801b0316106116805781611682565b825b90506000805b60c9548110156117465760ca81815481106116b357634e487b7160e01b600052603260045260246000fd5b9060005260206000200154836001600160801b031611158015611700575060c981815481106116f257634e487b7160e01b600052603260045260246000fd5b906000526020600020015482105b156117345760c9818154811061172657634e487b7160e01b600052603260045260246000fd5b906000526020600020015491505b8061173e81612c1d565b915050611688565b509695505050505050565b600f82810b810b600090815260d26020908152604080832085850b90940b835292905290812054156117d55760405162461bcd60e51b815260206004820152602760248201527f617474656d7074696e6720746f20636c61696d20616c7265616479206d696e746044820152661959081b185b9960ca1b6064820152608401610856565b60008084600f0b12156117f0576117eb84612c4c565b6117f2565b835b905060008084600f0b121561180f5761180a84612c4c565b611811565b835b60ce549091506001600160801b0380841661010090920416118015611848575060ce546001600160801b0380831661010090920416115b6118a95760405162461bcd60e51b815260206004820152602c60248201527f74686520636c61696d206973206265796f6e642074686520737065636966696560448201526b6420776f726c642073697a6560a01b6064820152608401610856565b60cc546118b7906001612b73565b60cc818155600091825260cf6020908152604080842080546fffffffffffffffffffffffffffffffff199081166001600160801b03600f8d810b828116939093179094558654885260d0865284882080549093168c850b91821617909255945494820b865260d28452828620910b8552909152822081905561193b91908890611ce2565b505060cc54949350505050565b6000818152606760205260408120546001600160a01b03166119c15760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610856565b60006119cc83610def565b9050806001600160a01b0316846001600160a01b03161480611a075750836001600160a01b03166119fc846107e1565b6001600160a01b0316145b80611a3757506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316611a5282610def565b6001600160a01b031614611aba5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610856565b6001600160a01b038216611b1c5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610856565b611b27600082611593565b6001600160a01b0383166000908152606860205260408120805460019290611b50908490612b9f565b90915550506001600160a01b0382166000908152606860205260408120805460019290611b7e908490612b73565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600054610100900460ff1680611bf8575060005460ff16155b611c145760405162461bcd60e51b815260040161085690612a6e565b600054610100900460ff16158015611c36576000805461ffff19166101011790555b611c3e611f3d565b611c46611f3d565b611c508383611fa7565b801561098c576000805461ff0019169055505050565b600054610100900460ff1680611c7f575060005460ff16155b611c9b5760405162461bcd60e51b815260040161085690612a6e565b600054610100900460ff16158015611cbd576000805461ffff19166101011790555b611cc5611f3d565b611ccd61203c565b8015611cdf576000805461ff00191690555b50565b600081815260d160205260409020548314611d655760405162461bcd60e51b815260206004820152603b60248201527f44697374726963743a20417474656d7074656420746f206d6f766520706c6f7460448201527f206e6f742077697468696e206f726967696e20646973747269637400000000006064820152608401610856565b600081815260d1602090815260409182902084905581518581529081018490529081018290527f5112ef0e7d99d6ff5fcfc318db540adef82456873e39b67493ce8cf18f2af76c9060600160405180910390a1505050565b611dc8848484611a3f565b611dd4848484846120ea565b6112355760405162461bcd60e51b8152600401610856906129d9565b606081611e145750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611e3e5780611e2881612c1d565b9150611e379050600a83612b8b565b9150611e18565b60008167ffffffffffffffff811115611e6757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611e91576020820181803683370190505b5090505b8415611a3757611ea6600183612b9f565b9150611eb3600a86612c38565b611ebe906030612b73565b60f81b818381518110611ee157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611f03600a86612b8b565b9450611e95565b611f1483836121f7565b611f2160008484846120ea565b61098c5760405162461bcd60e51b8152600401610856906129d9565b600054610100900460ff1680611f56575060005460ff16155b611f725760405162461bcd60e51b815260040161085690612a6e565b600054610100900460ff16158015611ccd576000805461ffff19166101011790558015611cdf576000805461ff001916905550565b600054610100900460ff1680611fc0575060005460ff16155b611fdc5760405162461bcd60e51b815260040161085690612a6e565b600054610100900460ff16158015611ffe576000805461ffff19166101011790555b8251612011906065906020860190612384565b508151612025906066906020850190612384565b50801561098c576000805461ff0019169055505050565b600054610100900460ff1680612055575060005460ff16155b6120715760405162461bcd60e51b815260040161085690612a6e565b600054610100900460ff16158015612093576000805461ffff19166101011790555b609780546001600160a01b0319163390811790915560405181906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015611cdf576000805461ff001916905550565b60006001600160a01b0384163b156121ec57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061212e903390899088908890600401612989565b602060405180830381600087803b15801561214857600080fd5b505af1925050508015612178575060408051601f3d908101601f19168201909252612175918101906127e8565b60015b6121d2573d8080156121a6576040519150601f19603f3d011682016040523d82523d6000602084013e6121ab565b606091505b5080516121ca5760405162461bcd60e51b8152600401610856906129d9565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611a37565b506001949350505050565b6001600160a01b03821661224d5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610856565b6000818152606760205260409020546001600160a01b0316156122b25760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610856565b6001600160a01b03821660009081526068602052604081208054600192906122db908490612b73565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054828255906000526020600020908101928215612374579160200282015b82811115612374578251825591602001919060010190612359565b506123809291506123f7565b5090565b82805461239090612be2565b90600052602060002090601f0160209004810192826123b25760008555612374565b82601f106123cb57805160ff1916838001178555612374565b828001600101855582156123745791820182811115612374578251825591602001919060010190612359565b5b8082111561238057600081556001016123f8565b600067ffffffffffffffff83111561242657612426612ca6565b612439601f8401601f1916602001612b42565b905082815283838301111561244d57600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b038116811461247b57600080fd5b919050565b60008083601f840112612491578182fd5b50813567ffffffffffffffff8111156124a8578182fd5b6020830191508360208260051b85010111156124c357600080fd5b9250929050565b600082601f8301126124da578081fd5b8135602067ffffffffffffffff8211156124f6576124f6612ca6565b8160051b612505828201612b42565b83815282810190868401838801850189101561251f578687fd5b8693505b85841015612541578035835260019390930192918401918401612523565b50979650505050505050565b8035801515811461247b57600080fd5b8035600f81900b811461247b57600080fd5b600082601f83011261257f578081fd5b6113418383356020850161240c565b60006020828403121561259f578081fd5b61134182612464565b600080604083850312156125ba578081fd5b6125c383612464565b91506125d160208401612464565b90509250929050565b6000806000606084860312156125ee578081fd5b6125f784612464565b925061260560208501612464565b9150604084013590509250925092565b6000806000806080858703121561262a578081fd5b61263385612464565b935061264160208601612464565b925060408501359150606085013567ffffffffffffffff811115612663578182fd5b8501601f81018713612673578182fd5b6126828782356020840161240c565b91505092959194509250565b600080604083850312156126a0578182fd5b6126a983612464565b91506125d16020840161254d565b600080604083850312156126c9578182fd5b6126d283612464565b946020939093013593505050565b6000806000806000606086880312156126f7578081fd5b853567ffffffffffffffff8082111561270e578283fd5b61271a89838a01612480565b90975095506020880135915080821115612732578283fd5b5061273f88828901612480565b96999598509660400135949350505050565b60008060408385031215612763578182fd5b823567ffffffffffffffff8082111561277a578384fd5b612786868387016124ca565b9350602085013591508082111561279b578283fd5b506127a8858286016124ca565b9150509250929050565b6000602082840312156127c3578081fd5b6113418261254d565b6000602082840312156127dd578081fd5b813561134181612cbc565b6000602082840312156127f9578081fd5b815161134181612cbc565b600060208284031215612815578081fd5b6113418261255d565b60008060408385031215612830578182fd5b6128398361255d565b91506125d16020840161255d565b60008060408385031215612859578182fd5b823567ffffffffffffffff80821115612870578384fd5b61287c8683870161256f565b93506020850135915080821115612891578283fd5b506127a88582860161256f565b6000602082840312156128af578081fd5b81356001600160801b0381168114611341578182fd5b6000602082840312156128d6578081fd5b5035919050565b600080600080606085870312156128f2578182fd5b8435935060208501359250604085013567ffffffffffffffff811115612916578283fd5b61292287828801612480565b95989497509550505050565b60008151808452612946816020860160208601612bb6565b601f01601f19169290920160200192915050565b6000835161296c818460208801612bb6565b835190830190612980818360208801612bb6565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906129bc9083018461292e565b9695505050505050565b602081526000611341602083018461292e565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526023908201527f787320616e64207a73206172726179206c656e67746873206d757374206d617460408201526263682160e81b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b604051601f8201601f1916810167ffffffffffffffff81118282101715612b6b57612b6b612ca6565b604052919050565b60008219821115612b8657612b86612c7a565b500190565b600082612b9a57612b9a612c90565b500490565b600082821015612bb157612bb1612c7a565b500390565b60005b83811015612bd1578181015183820152602001612bb9565b838111156112355750506000910152565b600181811c90821680612bf657607f821691505b60208210811415612c1757634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612c3157612c31612c7a565b5060010190565b600082612c4757612c47612c90565b500690565b600081600f0b6f7fffffffffffffffffffffffffffffff19811415612c7357612c73612c7a565b9003919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114611cdf57600080fdfea2646970667358221220c7c25e7e4b28b2df80c79dedd7178129de055da5f1260d5618bce84983a284b464736f6c63430008040033";

    public static final String FUNC_ADMINCLAIM = "adminClaim";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_CLAIMDISTRICTLANDS = "claimDistrictLands";

    public static final String FUNC_CLAIMABLE = "claimable";

    public static final String FUNC_DISTRICTPRICE = "districtPrice";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_PLOTDISTRICTOF = "plotDistrictOf";

    public static final String FUNC_PLOTIDOF = "plotIdOf";

    public static final String FUNC_PLOTPRICEDISTANCES = "plotPriceDistances";

    public static final String FUNC_PLOTPRICES = "plotPrices";

    public static final String FUNC_PLOT_X = "plot_x";

    public static final String FUNC_PLOT_Z = "plot_z";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETCLAIMABLE = "setClaimable";

    public static final String FUNC_SETDISTRICTPRICE = "setDistrictPrice";

    public static final String FUNC_SETPLOTPRICES = "setPlotPrices";

    public static final String FUNC_SETWORLDSIZE = "setWorldSize";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TOTALPLOTS = "totalPlots";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_TRANSFERPLOT = "transferPlot";

    public static final String FUNC_WORLDSIZE = "worldSize";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PLOTTRANSFER_EVENT = new Event("PlotTransfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected District(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected District(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected District(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected District(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<PlotTransferEventResponse> getPlotTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PLOTTRANSFER_EVENT, transactionReceipt);
        ArrayList<PlotTransferEventResponse> responses = new ArrayList<PlotTransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PlotTransferEventResponse typedResponse = new PlotTransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.origin_id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.target_id = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.plotId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PlotTransferEventResponse> plotTransferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PlotTransferEventResponse>() {
            @Override
            public PlotTransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PLOTTRANSFER_EVENT, log);
                PlotTransferEventResponse typedResponse = new PlotTransferEventResponse();
                typedResponse.log = log;
                typedResponse.origin_id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.target_id = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.plotId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PlotTransferEventResponse> plotTransferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PLOTTRANSFER_EVENT));
        return plotTransferEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> adminClaim(List<BigInteger> _xs, List<BigInteger> _zs, BigInteger _districtId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADMINCLAIM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Int128>(
                        org.web3j.abi.datatypes.generated.Int128.class,
                        org.web3j.abi.Utils.typeMap(_xs, org.web3j.abi.datatypes.generated.Int128.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Int128>(
                        org.web3j.abi.datatypes.generated.Int128.class,
                        org.web3j.abi.Utils.typeMap(_zs, org.web3j.abi.datatypes.generated.Int128.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(_districtId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> claimDistrictLands(List<BigInteger> _xs, List<BigInteger> _zs, BigInteger _districtId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CLAIMDISTRICTLANDS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Int128>(
                        org.web3j.abi.datatypes.generated.Int128.class,
                        org.web3j.abi.Utils.typeMap(_xs, org.web3j.abi.datatypes.generated.Int128.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Int128>(
                        org.web3j.abi.datatypes.generated.Int128.class,
                        org.web3j.abi.Utils.typeMap(_zs, org.web3j.abi.datatypes.generated.Int128.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(_districtId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> claimable() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CLAIMABLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> districtPrice() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DISTRICTPRICE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(String _name, String _symbol) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner), 
                new org.web3j.abi.datatypes.Address(operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> plotDistrictOf(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PLOTDISTRICTOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> plotIdOf(BigInteger param0, BigInteger param1) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PLOTIDOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int128(param0), 
                new org.web3j.abi.datatypes.generated.Int128(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> plotPriceDistances(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PLOTPRICEDISTANCES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> plotPrices(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PLOTPRICES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> plot_x(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PLOT_X, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int128>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> plot_z(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PLOT_Z, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int128>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] _data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(_data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setClaimable(Boolean _claimable) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETCLAIMABLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Bool(_claimable)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setDistrictPrice(BigInteger _districtPrice) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETDISTRICTPRICE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_districtPrice)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setPlotPrices(List<BigInteger> _prices, List<BigInteger> _distances) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETPLOTPRICES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_prices, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_distances, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setWorldSize(BigInteger _worldSize) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETWORLDSIZE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint128(_worldSize)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalPlots() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALPLOTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferPlot(BigInteger origin_id, BigInteger target_id, List<BigInteger> plot_ids) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERPLOT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(origin_id), 
                new org.web3j.abi.datatypes.generated.Uint256(target_id), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(plot_ids, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> worldSize() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_WORLDSIZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint128>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    @Deprecated
    public static District load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new District(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static District load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new District(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static District load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new District(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static District load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new District(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<District> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(District.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<District> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(District.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<District> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(District.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<District> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(District.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class PlotTransferEventResponse extends BaseEventResponse {
        public BigInteger origin_id;

        public BigInteger target_id;

        public BigInteger plotId;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
